AWSTemplateFormatVersion: 2010-09-09
Description: This template provisions 
  a multi-az, load balanced and Auto Scaled sample web site running on an Apache
  Web Server. 
Parameters:
  NetworkStackName:
    Description: Name of an active CloudFormation stack that contain VPC, public and private subnets, that will be used in this stack.     
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: '^[a-zA-Z][-a-zA-Z0-9]*$'     
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.  
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  RegionMap:
    eu-west-1:
      AMI: ami-bff32ccc
    ap-southeast-1:
      AMI: ami-c9b572aa
    ap-southeast-2:
      AMI: ami-48d38c2b
    eu-central-1:
      AMI: ami-bc5b48d0
    ap-northeast-2:
      AMI: ami-249b554a
    ap-northeast-1:
      AMI: ami-383c1956
    us-east-1:
      AMI: ami-60b6c60a
    sa-east-1:
      AMI: ami-6817af04
    us-west-1:
      AMI: ami-d5ea86b5
    us-west-2:
      AMI: ami-f0091d91
Resources:
  ELBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: elb-sg
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId: !ImportValue 
        'Fn::Sub': '${NetworkStackName}-VPCID'
  ELB:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      ConnectionDrainingPolicy:
        Enabled: true
        Timeout: 30
      CrossZone: true
      HealthCheck:
        HealthyThreshold: '2'
        Interval: '10'
        Target: 'HTTP:80/'
        Timeout: '5'
        UnhealthyThreshold: '2'
      LoadBalancerName: elb
      Listeners:
        - InstancePort: '80'
          InstanceProtocol: HTTP
          LoadBalancerPort: '80'
          Protocol: HTTP
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ELBSecurityGroup
      Subnets: 
        Fn::Split: # Split to get a list of strings
          - ","
          - Fn::ImportValue: # Use full function name
              !Sub "${NetworkStackName}-PublicSubnets" # Substitute parameter
        
  EC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: ec2-sg
      SecurityGroupEgress:
        - IpProtocol: '-1'
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - CidrIp: !Ref SSHLocation          
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - FromPort: 80
          IpProtocol: tcp
          SourceSecurityGroupId: !Ref ELBSecurityGroup
          ToPort: 80
      VpcId: !ImportValue 
        'Fn::Sub': '${NetworkStackName}-VPCID'
  LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:    
      KeyName: !Ref KeyName
      AssociatePublicIpAddress: true
      ImageId: !FindInMap 
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref EC2SecurityGroup
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - '#!/bin/bash -ex'
            - |+

            - yum -y install httpd
            - |+

            - chkconfig httpd on
            - |+

            - 'echo "<html><h1>Hello world!</h1><br><h2>You are on host '
            - $(hostname -f)
            - '</h2></html>" >> /var/www/html/index.html'
            - |+

            - service httpd start
            - |+

            - '/opt/aws/bin/cfn-signal -e 0 --region '
            - !Ref 'AWS::Region'
            - ' --stack '
            - !Ref 'AWS::StackName'
            - ' --resource AutoScalingGroup'
            - |+

  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      MinSize: '2'
      MaxSize: '3'
      DesiredCapacity: '2'
      LaunchConfigurationName: !Ref LaunchConfiguration
      VPCZoneIdentifier:
        Fn::Split: # Split to get a list of strings
          - ","
          - Fn::ImportValue: # Use full function name
              !Sub "${NetworkStackName}-PrivateSubnets"
      LoadBalancerNames:
        - !Ref ELB
      HealthCheckGracePeriod: 60
      HealthCheckType: ELB
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '2'
        MinInstancesInService: '1'
        PauseTime: PT10M
        SuspendProcesses:
          - AlarmNotification
        WaitOnResourceSignals: true
  WebServerScaleUpPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: '60'
      ScalingAdjustment: '1'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 5a729a7c-98f0-4f59-b710-0687742a46ac
  WebServerScaleDownPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref AutoScalingGroup
      Cooldown: '60'
      ScalingAdjustment: '-1'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 57249b4f-dfb8-42a5-8034-690efdaec535
  CPUAlarmHigh:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-up if CPU > 90% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '90'
      AlarmActions:
        - !Ref WebServerScaleUpPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
    Metadata:
      'AWS::CloudFormation::Designer':
        id: d63bf71f-35f6-4fd4-ac44-17500c77e57b
  CPUAlarmLow:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-down if CPU < 70% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '70'
      AlarmActions:
        - !Ref WebServerScaleDownPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      ComparisonOperator: LessThanThreshold
    
Outputs:
  ELB:
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - ELB
          - DNSName
    Description: Load Balancer URL
